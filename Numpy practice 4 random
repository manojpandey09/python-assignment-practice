{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2fbd8d0e-968c-4626-87d3-1d3661920e4f",
   "metadata": {},
   "source": [
    "### NumPy: Random Exercises, Practice, Solution\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca86f207-b495-46a5-a746-6742099c94f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7386888-4f3e-4042-ac38-283ec511c5da",
   "metadata": {},
   "source": [
    "#### 1. Random Normal Numbers\n",
    "\n",
    "Write a NumPy program to generate five random numbers from the normal distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "47033f3b-7036-4794-9bfd-f5d363ed3201",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.90747965, 0.35444072, 0.99050314, 0.58098828, 0.02465821])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.random.random(5)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9aa18cc1-bdaf-4384-8a00-7b9eb10141e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.59918343, -0.03886568, -1.75787356,  0.27382465,  0.5667621 ])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = np.random.normal(size = 5)\n",
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d83acdc-e48e-4a1f-9dec-d4f89f464a64",
   "metadata": {},
   "source": [
    "#### 2. Random Integers in Range\n",
    "\n",
    "Write a NumPy program to generate six random integers between 10 and 30."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "619d56dc-f96c-491e-bf20-fad24412e79e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([24, 10, 27, 19, 18, 28])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.random.randint(low = 10 , high = 30 , size = 6)\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f6f43bd-68ef-485c-96b4-710cbb7360fe",
   "metadata": {},
   "source": [
    "#### 3. 3x3x3 Random Array\n",
    "\n",
    "Write a NumPy program to create a 3x3x3 array with random values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f3b5ad52-05c3-410f-aa9f-5478cdda240b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.13834011, 0.42354848, 0.4924378 ],\n",
       "        [0.84752901, 0.48723042, 0.96637828],\n",
       "        [0.39898445, 0.46717834, 0.45779099]],\n",
       "\n",
       "       [[0.08710026, 0.95891253, 0.38122712],\n",
       "        [0.3784986 , 0.86281703, 0.50069583],\n",
       "        [0.59546112, 0.41193451, 0.84074879]],\n",
       "\n",
       "       [[0.61061219, 0.8079091 , 0.28749165],\n",
       "        [0.55715429, 0.00458175, 0.39648319],\n",
       "        [0.70301087, 0.83744094, 0.66812359]]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.random.random((3,3,3))\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "826889ff-468b-472e-8608-6d2b19a658e7",
   "metadata": {},
   "source": [
    "#### 4. 5x5 Array Min/Max\n",
    "\n",
    "Write a NumPy program to create a 5x5 array with random values and find the minimum and maximum values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2c5ca198-6d48-4d1d-a206-0d06fc1e2434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.05311233, 0.53226759, 0.36292379, 0.06354713, 0.51357626],\n",
       "       [0.62565119, 0.97120996, 0.42483539, 0.1708614 , 0.90040165],\n",
       "       [0.82017439, 0.38892474, 0.33348085, 0.45794593, 0.43532826],\n",
       "       [0.8138154 , 0.40715888, 0.48294535, 0.95936957, 0.71905929],\n",
       "       [0.56419494, 0.38233576, 0.9670597 , 0.2814131 , 0.90827078]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.random.random((5,5))\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cc4918ca-ee0a-4aaa-97c2-1e050d020415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.05311233110699631\n",
      "0.9712099598837112\n"
     ]
    }
   ],
   "source": [
    "print(a.min())\n",
    "print(a.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcfccc9b-5857-49e1-bc95-49b4691f351c",
   "metadata": {},
   "source": [
    "#### 5. Extract First 5 Rows of 10x4 Array\n",
    "\n",
    "Write a NumPy program to create a random 10x4 array and extract the first five rows of the array and store them into a variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c90737ef-1500-4e55-bc7c-c1ef45bf69e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.random.random((10,4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "f8c738d6-9666-4df7-a797-710b92d604ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.09715192, 0.21628078, 0.261311  , 0.76080561],\n",
       "       [0.84642216, 0.11846208, 0.87864097, 0.36694807],\n",
       "       [0.81155391, 0.56848714, 0.30428912, 0.03033947],\n",
       "       [0.46325665, 0.76554513, 0.6240966 , 0.08989688],\n",
       "       [0.79197253, 0.73609864, 0.34650209, 0.15255962]])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = a[:5]\n",
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a95bbb0b-26c2-4655-b7c4-22514bd6517b",
   "metadata": {},
   "source": [
    "#### 6. Shuffle Numbers 0-10\n",
    "\n",
    "Write a NumPy program to shuffle numbers between 0 and 10 (inclusive)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fb1fdfb9-039a-44df-8289-7b51df063eeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.arange(10)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1b473094-0923-49a7-8cf0-462f69b9b215",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 0, 4, 5, 3, 7, 6, 1, 9, 8])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = np.random.shuffle(a)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "331b19ce-54ba-45d4-a866-17f0e2b1a1b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 2, 5, 3, 1, 9, 0, 7, 8, 6])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.permutation(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1047d2-9f7b-4051-bdcb-46975b1bde93",
   "metadata": {},
   "source": [
    "#### 7. Normalize a 3x3 Matrix\n",
    "\n",
    "Write a NumPy program to normalize a 3x3 random matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "826fd978-232c-4553-9cb6-d4ec0cff8efb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original:\n",
      " [[0.13428726 0.1736768  0.13939067]\n",
      " [0.8896273  0.61813589 0.98191315]\n",
      " [0.14989971 0.99284426 0.63855711]]\n",
      "Normalized:\n",
      " [[0.         0.04587878 0.00594417]\n",
      " [0.87977855 0.56356029 0.98726804]\n",
      " [0.01818453 1.         0.5873458 ]]\n"
     ]
    }
   ],
   "source": [
    "a = np.random.random((3,3))  # 3x3 random decimal matrix\n",
    "b = (a - a.min()) / (a.max() - a.min())\n",
    "print(\"Original:\\n\", a)\n",
    "print(\"Normalized:\\n\", b)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b2a472d-58a6-4bb3-a7c5-47d212f0bdc4",
   "metadata": {},
   "source": [
    "#### 8. Sort Random Vector of Size 10\n",
    "\n",
    "Write a NumPy program to create a random vector of size 10 and sort it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "4abcdd8d-1652-47ce-bc0f-29ceaa8532f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.45647914, 0.32317344, 0.78853488, 0.99308653, 0.72163403,\n",
       "       0.71540004, 0.8615357 , 0.08131355, 0.40346051, 0.81824901])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.random.random(10)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "022f9a75-b0a2-4f65-99bb-526ab79f0850",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.08131355, 0.32317344, 0.40346051, 0.45647914, 0.71540004,\n",
       "       0.72163403, 0.78853488, 0.81824901, 0.8615357 , 0.99308653])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sort()\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68f8bf1c-405f-4e93-b5e3-b654752844de",
   "metadata": {},
   "source": [
    "#### 9. Find Nearest Value in Array\n",
    "\n",
    "Write a NumPy program to find the nearest value from a given value in an array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "4bce797a-dd75-4fda-aa5a-5b1672168398",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Array: [10 20 30 40 50]\n",
      "Target: 34\n",
      "Nearest value: 30\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Step 1: Array banate hain\n",
    "arr = np.array([10, 20, 30, 40, 50])\n",
    "\n",
    "# Step 2: Target value\n",
    "target = 34\n",
    "\n",
    "# Step 3: Find nearest value\n",
    "# Trick: abs(arr - target) ➤ difference nikalta hai\n",
    "index = np.abs(arr - target).argmin()\n",
    "nearest = arr[index]\n",
    "\n",
    "print(\"Array:\", arr)\n",
    "print(\"Target:\", target)\n",
    "print(\"Nearest value:\", nearest)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1444bd96-7cbb-4f45-8355-4c130dc2850f",
   "metadata": {},
   "source": [
    "#### 10. Check Array Equality\n",
    "\n",
    "Write a NumPy program to check two random arrays are equal or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "8247bb9d-ac37-4883-b66a-08b9694813b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.random.randint(0,2,6)\n",
    "b = np.random.randint(1,2,6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "7d3ea543-9260-46a6-acf3-1d4b93193794",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = np.allclose(a,b)\n",
    "n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6a24001-a48f-4503-9997-acc994f190f6",
   "metadata": {},
   "source": [
    "#### 11. Replace Maximum in Vector with -1\n",
    "\n",
    "Write a NumPy program to create random vector of size 15 and replace the maximum value by -1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "ec5a75f4-0b87-4108-b77d-fc5a41347520",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.04287248, 0.43586768, 0.1217646 , 0.61712373, 0.05397109,\n",
       "       0.70031308, 0.62531293, 0.73797791, 0.91872313, 0.1887982 ,\n",
       "       0.85726319, 0.6305597 , 0.51160182, 0.53827078, 0.42509913])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.random.random(15)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "da7b6e36-369d-45d8-a4c5-c63a76277216",
   "metadata": {},
   "outputs": [],
   "source": [
    "x[x.argmax()] = -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "878d4176-e4a5-467b-973b-bd61f3c04b78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.04287248,  0.43586768,  0.1217646 ,  0.61712373,  0.05397109,\n",
       "        0.70031308,  0.62531293,  0.73797791, -1.        ,  0.1887982 ,\n",
       "        0.85726319,  0.6305597 ,  0.51160182,  0.53827078,  0.42509913])"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20cabfe9-76a9-4076-b0c3-75cf320676f5",
   "metadata": {},
   "source": [
    "#### 12. n Largest Values in Array\n",
    "\n",
    "Write a NumPy program to get the n largest values of an array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "65404906-75ec-4e4b-a0de-ead095fe7da5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(10)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "f467ec2b-7183-4009-8b6d-c8e8fb0d91cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.shuffle(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "90887aa0-0d29-4865-9774-fda2868d765c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 0, 7, 1, 3, 9, 5, 4, 2, 8])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "20686eed-3d34-4b12-bb98-ecb9f3d350df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1143cf36-8f89-4438-a002-3cb2a4b9e710",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (base)",
   "language": "python",
   "name": "base"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
